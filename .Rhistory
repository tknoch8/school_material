# generated Poisson example
x <- rep(seq(1,10), 6)
y <- rpois(60, lambda = 7*x)
plot(x,y)
lmPoisFit <- lm(y ~ x)
summary(lmPoisFit)
library(MASS)
rStudResid <- studres(lmPoisFit)
plot(lmPoisFit$fitted.values, rStudResid)
yTrans <- sqrt(y)
plot(x, yTrans)
lmTransFit <- lm(yTrans ~ x)
summary(lmTransFit)  #what is interpretation of beta?
rStudTransResid <- studres(lmTransFit)
plot(lmTransFit$fitted.values, rStudTransResid)
nflDat <- read.csv(here::here("data_sets", "data-table-B1.csv"))
glimpse(nflDat)
require(tidyverse)
glimpse(nflDat)
nflFit2 <- lm(y ~ x2 + x7 + x8 + x9, data = nflDat)
summary(nflFit2)
rStudentResids <- studres(nflFit2)
summary(nflFit2)
rStudentResids <- studres(nflFit2)
plot(nflFit2$fitted.values, rStudentResids)
?asin
transY <- asin(sqrt(nflDat[, "y"]/14))  #divide by 14 b/c that is number of games.
nflDat <- cbind(nflDat, transY)
head(nflDat)
nflFitTrans <- lm(transY ~ x2 + x7 + x8 + x9, data = nflDat)
summary(nflFitTrans)  #what is interpretation of beta?
rStudTransResids <- studres(nflFitTrans)
plot(nflFitTrans$fitted.values, rStudTransResids)
rStudTransResids <- studres(nflFitTrans)
plot(nflFitTrans$fitted.values, rStudTransResids)
x <- rep(seq(1,10), 6)
y <- rpois(60, lambda = 7*x)
lmFit <- lm(y ~ x)
boxcox(lmFit)
abline(v = .5, col = 2)
2242.98 - (280.93 + 277.32 + 32 + 61.91 + 39.86 + 18.07 + 54.35 + 18.96 + 101.86)
# generated Poisson example
x <- rep(seq(1,10), 6)
y <- rpois(60, lambda = 7*x)
plot(x,y)
lmPoisFit <- lm(y ~ x)
summary(lmPoisFit)
library(MASS)
rStudResid <- studres(lmPoisFit)
plot(lmPoisFit$fitted.values, rStudResid)
yTrans <- sqrt(y)
plot(x, yTrans)
lmTransFit <- lm(yTrans ~ x)
summary(lmTransFit)  #what is interpretation of beta?
rStudTransResid <- studres(lmTransFit)
plot(lmTransFit$fitted.values, rStudTransResid)
nflDat <- read.csv(here::here("data_sets", "data-table-B1.csv"))
nflFit2 <- lm(y ~ x2 + x7 + x8 + x9, data = nflDat)
summary(nflFit2)
rStudentResids <- studres(nflFit2)
plot(nflFit2$fitted.values, rStudentResids)
require(tidyverse)
require(broom)
nflDat <- read.csv(here::here("data_sets", "data-table-B1.csv"))
glimpse(nflDat)
nflDat <- read.csv(here::here("data_sets", "data-table-B1.csv"))
nflFit2 <- lm(y ~ x2 + x7 + x8 + x9, data = nflDat)
summary(nflFit2)
rStudentResids <- studres(nflFit2)
require(MASS)
rStudentResids <- studres(nflFit2)
plot(nflFit2$fitted.values, rStudentResids)
transY <- asin(sqrt(nflDat[, "y"]/14))  #divide by 14 b/c that is number of games.
nflDat <- cbind(nflDat, transY)
nflFitTrans <- lm(transY ~ x2 + x7 + x8 + x9, data = nflDat)
summary(nflFitTrans)  #what is interpretation of beta?
rStudTransResids <- studres(nflFitTrans)
plot(nflFitTrans$fitted.values, rStudTransResids)
library(tidyverse)
library(ggplot2)
library(GGally)
library(ggrepel)
library(here)
crime <- read.csv(here("data_raw", "crime.csv"))
crime <- read.csv(here("data_sets", "crime.csv"))
crime
## convert to table
(crime <- crime %>%
column_to_rownames(var = "City"))
## standardize
(std.crime <- round(scale(crime), 4))
(round(cor(crime), 4)) # cor(crime) = cor(std.crime)
(round(cor(std.crime), 4))
(dist.crime <- round(dist(crime), 4))
(dist.std.crime <- round(dist(std.crime), 4))
(clust.nn.std.crime <- hclust(dist.std.crime, method = "single"))
## can use standardized or non-standardized data
(clust.nn.crime <- hclust(dist.crime, method = "single"))
plot(clust.nn.std.crime, hang = -1, cex = 0.6,
ylab = "Standardized Distance between Cities",
main = "Dendogram of crime rates in Cities")
plot(clust.nn.crime, hang = -1, cex = 0.6,
ylab = "Distance between Cities",
main = "Dendrogram of crime rates in Cities")
dist.std.crime
dist.crime
crime6 <- crime[1:6,]
std.crime6 <- scale(crime6)
dist.crime6 <- dist(crime6)
dist.std.crime6 <- dist(std.crime6)
(clust.nn.crime6 <- hclust(dist.crime6, method = "single"))
plot(clust.nn.crime6, hang = -1, cex = 0.7,
ylab = "Distance between first 6 Cities",
main = "Dendogram of crime rates in first 6 Cities")
## compare to distance object
dist.crime6
clus.crimall <- hclust(dist.crime, method = "average")
plot(clus.crimall, hang = -1, cex = 0.6,
ylab = "Distance between Cities",
main = "Dendrogram of all 16 Cities")
library(NbClust)
temp <- NbClust(diss = dist.crime, min.nc = 2, max.nc = 10,
distance = NULL, method = "average", index = "mcclain")
temp$Best.nc
temp$Best.partition ## "best" partition
prot <- read.csv("http://www.stat.colostate.edu/~pturk/data/protein.csv")
prot <- read.csv("http://www.stat.colostate.edu/~pturk/data/protein.csv")
prot
library(here)
library(tidyverse)
library(GGally)
library(ggrepel)
(euroemp <- read.csv(here("data_raw", "Euroemp.csv")))
(euroemp <- read.csv(here("data_sets", "Euroemp.csv")))
as.dist(round(cor(euroemp[,3:11]), 3)) ## to hide duplicate values
(std.data <- scale(euroemp[,3:11]))
(PCA <- prcomp(std.data)) ## perform PCA
PCA$rotation
summary(PCA)
(fac.loads <- round(cor(std.data, PCA$x), 2)) ## "importance" of each variable in
plot(PCA) ## keep two (first two account for ~55% of variability)
summary(PCA)
(round(PCA$rotation[,1:2], 2))
p1 <- ggplot(data.frame(PCA$x), aes(x = PC1, y = PC2))
p1
p1 <- p1 + geom_point(color = "red")
p1 <- ggplot(data.frame(PCA$x), aes(x = PC1, y = PC2))
p1 <- p1 + geom_text_repel(aes(label = euroemp[,1], color = euroemp[,2]))
p1 + theme(legend.title = element_blank(), legend.position = "top")
p1 <- ggplot(data.frame(PCA$x), aes(x = PC1, y = PC2))
p1 <- p1 + geom_point(color = "red")
p1 <- p1 + geom_text_repel(aes(label = euroemp[,1], color = euroemp[,2]))
p1 + theme(legend.title = element_blank(), legend.position = "top")
p1
(a_rm <- round(PCA$rotation %*% diag(PCA$sdev)[,1:4], 2)) ## unrotated factor loadings
round(diag(a_rm %*% t(a_rm)), 2) ## proportions of variability attributable
(rot <- varimax(a_rm, eps = 1e-12)$rotmat)
round(t(rot)%*%rot) ## Demonstrate orthogonality for orthogonal rotation
round(rot%*%t(rot))
(g_rm <- round(a_rm %*% rot, 2)) ## New (rotated) factor loadings
a_rm
g_rm ## eliminated most of the overlap by orthogonal rotation
## (reminder): number of factors kept is number of
# sds (sqrt(eigenvalues)) > 1 in PCs
PCA
round(diag(g_rm %*% t(g_rm)), 2)
round(diag(a_rm %*% t(a_rm)), 2) ## communalities are unchanged* by rotation
(Fstar <- round(std.data %*% g_rm %*% solve(t(g_rm) %*% g_rm), 2))
summary(PCA)
colnames(Fstar) <- c("factor 1","factor 2","factor 3","factor 4")
countryloads <- cbind(euroemp[,1:2], Fstar)
head(countryloads)
g_rm
subset(countryloads, Country == "Albania"); subset(euroemp, Country == "Albania")
countryloads
g_rm
subset(countryloads, Country == "USSRF"); subset(euroemp, Country == "USSRF")
g_rm
subset(countryloads, Country == "Czech/Slovakia"); subset(euroemp, Country == "Czech/Slovakia")
g_rm
subset(countryloads, Country == "Romania"); subset(euroemp, Country == "Romania")
g_rm
subset(countryloads, Country == "Gibraltar"); subset(euroemp, Country == "Gibraltar")
g_rm
subset(countryloads, Country == "Netherlands"); subset(euroemp, Country == "Netherlands")
subset(countryloads, Country == "Sweden"); subset(euroemp, Country == "Sweden")
