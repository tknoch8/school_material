) +
geom_text_repel(
aes(
label = label_by,
color = color_by
)
) +
theme(
legend.title = element_blank(),
legend.position = "top"
)
}
#-------------- add plot to output list -------------------------------------
my_list$pc1_pc2_plot <- pc_plot
### transition to factor analysis ###
#-------------- add more objects to output list -----------------------------
unrotated_fac_loadings <- round(pr_comp$rotation %*% diag(pr_comp$sdev)[,1:num_pcs_for_loadings], 2)
my_list$unrotated_factor_loadings <- unrotated_fac_loadings
prop_vari_attr <- round(diag(unrotated_fac_loadings %*% t(unrotated_fac_loadings)), 2)
my_list$prop_variation_attr <- prop_vari_attr
# "verimax rotation"
rot <- varimax(unrotated_fac_loadings, eps = 1e-12)$rotmat
rot_fac_loadings <- round(unrotated_fac_loadings %*% rot, 2)
my_list$rotated_factor_loadings <- rot_fac_loadings
f_star <- round(std_data %*% rot_fac_loadings %*% solve(t(rot_fac_loadings) %*% rot_fac_loadings), 2)
#-------------- tidy eval problems ??? --------------------------------------
# label_by <- enquo(label_by)
# color_by <- enquo(color_by)
# vec_1 <- data %>%
#   select(!!label_by)
#
# vec_2 <- data %>%
#   select(!!color_by)
#
# factor_loads <- data.frame(vec_1, vec_2, f_star)
#
# my_list$factor_loadings <- factor_loads
return(my_list)
}
my_analysis <- run_pca_fa(gtcars)
run_pca_fa <- function(data, label_by = NULL, color_by = NULL, num_pcs_for_loadings = 4, ...) {
# label_by <- enquo(label_by)
# color_by <- enquo(color_by)
#num_pcs_for_loadings <- enquo(num_pcs_for_loadings)
#-------------- create blank list to fill -----------------------------------
my_list <- list()
#-------------- select numeric columns for calculations ---------------------
is_a_number <- function(x) {
if ("numeric" %in% class(x) || "double" %in% class(x) || "integer" %in% class(x)) {
return(TRUE)
} else if ("character" %in% class(x) || "factor" %in% class(x)) {
return(FALSE)
}
}
std_data <- data %>%
select_if(is_a_number) %>%
scale()
#-------------- perform pca -------------------------------------------------
pr_comp <- prcomp(na.omit(std_data))
#-------------- get pca summary ---------------------------------------------
pr_summary <- pr_comp %>%
summary()
#-------------- get factor loads --------------------------------------------
# "importance" of each variable in determining PCs
std_data <- na.omit(std_data)
fac_loads <- round(cor(std_data, pr_comp$x), 2)
#-------------- add some objects to output list -----------------------------
my_list$standardized_data <- std_data
my_list$pricipal_component_decomposition <- pr_comp
my_list$decomposition_summary <- pr_summary
my_list$factor_loads <- fac_loads
#-------------- plot when label_by OR color_by argument is NULL -------------
if (is.null(color_by) || is.null(label_by)) {
pc_plot <- data.frame(pr_comp$x) %>%
ggplot(
aes(
x = PC1,
y = PC2
)
) +
geom_point(
color = "red"
) +
# geom_text_repel(
#   label = ""
# ) +
theme(
legend.title = element_blank(),
legend.position = "top"
)
} else {
#-------------- plot when BOTH arguments are NOT NULL -----------------------
pc_plot <- data.frame(pr_comp$x) %>%
ggplot(
aes(
x = PC1,
y = PC2
)
) +
geom_point(
color = "red"
) +
geom_text_repel(
aes(
label = label_by,
color = color_by
)
) +
theme(
legend.title = element_blank(),
legend.position = "top"
)
}
#-------------- add plot to output list -------------------------------------
my_list$pc1_pc2_plot <- pc_plot
### transition to factor analysis ###
#-------------- add more objects to output list -----------------------------
unrotated_fac_loadings <- round(pr_comp$rotation %*% diag(pr_comp$sdev)[,1:num_pcs_for_loadings], 2)
my_list$unrotated_factor_loadings <- unrotated_fac_loadings
prop_vari_attr <- round(diag(unrotated_fac_loadings %*% t(unrotated_fac_loadings)), 2)
my_list$prop_variation_attr <- prop_vari_attr
# "verimax rotation"
rot <- varimax(unrotated_fac_loadings, eps = 1e-12)$rotmat
rot_fac_loadings <- round(unrotated_fac_loadings %*% rot, 2)
my_list$rotated_factor_loadings <- rot_fac_loadings
f_star <- round(std_data %*% rot_fac_loadings %*% solve(t(rot_fac_loadings) %*% rot_fac_loadings), 2)
#-------------- tidy eval problems ??? --------------------------------------
# label_by <- enquo(label_by)
# color_by <- enquo(color_by)
# vec_1 <- data %>%
#   select(!!label_by)
#
# vec_2 <- data %>%
#   select(!!color_by)
#
# factor_loads <- data.frame(vec_1, vec_2, f_star)
#
# my_list$factor_loadings <- factor_loads
return(my_list)
}
my_analysis <- run_pca_fa(gtcars)
my_analysis$standardized_data
my_analysis$pc1_pc2_plot
my_analysis$factor_loads
my_analysis$decomposition_summary
glimpse(gtcars)
my_analysis <- run_pca_fa(gtcars, label_by = gtcars$mpg_c, color_by = gtcars$mfr)
my_analysis$pc1_pc2_plot
run_pca_fa <- function(data, label_by = NULL, color_by = NULL, num_pcs_for_loadings = 4, ...) {
# label_by <- enquo(label_by)
# color_by <- enquo(color_by)
#num_pcs_for_loadings <- enquo(num_pcs_for_loadings)
#-------------- create blank list to fill -----------------------------------
my_list <- list()
#-------------- select numeric columns for calculations ---------------------
is_a_number <- function(x) {
if ("numeric" %in% class(x) || "double" %in% class(x) || "integer" %in% class(x)) {
return(TRUE)
} else if ("character" %in% class(x) || "factor" %in% class(x)) {
return(FALSE)
}
}
std_data <- data %>%
select_if(is_a_number) %>%
scale()
std_data <- na.omit(std_data)
#-------------- perform pca -------------------------------------------------
pr_comp <- prcomp(na.omit(std_data))
#-------------- get pca summary ---------------------------------------------
pr_summary <- pr_comp %>%
summary()
#-------------- get factor loads --------------------------------------------
# "importance" of each variable in determining PCs
fac_loads <- round(cor(std_data, pr_comp$x), 2)
#-------------- add some objects to output list -----------------------------
my_list$standardized_data <- std_data
my_list$pricipal_component_decomposition <- pr_comp
my_list$decomposition_summary <- pr_summary
my_list$factor_loads <- fac_loads
#-------------- plot when label_by OR color_by argument is NULL -------------
if (is.null(color_by) || is.null(label_by)) {
pc_plot <- data.frame(pr_comp$x) %>%
ggplot(
aes(
x = PC1,
y = PC2
)
) +
geom_point(
color = "red"
) +
# geom_text_repel(
#   label = ""
# ) +
theme(
legend.title = element_blank(),
legend.position = "top"
)
} else {
#-------------- plot when BOTH arguments are NOT NULL -----------------------
pc_plot <- data.frame(pr_comp$x) %>%
ggplot(
aes(
x = PC1,
y = PC2
)
) +
geom_point(
color = "red"
) +
geom_text_repel(
aes(
label = ~label_by,
color = ~color_by
)
) +
theme(
legend.title = element_blank(),
legend.position = "top"
)
}
#-------------- add plot to output list -------------------------------------
my_list$pc1_pc2_plot <- pc_plot
### transition to factor analysis ###
#-------------- add more objects to output list -----------------------------
unrotated_fac_loadings <- round(pr_comp$rotation %*% diag(pr_comp$sdev)[,1:num_pcs_for_loadings], 2)
my_list$unrotated_factor_loadings <- unrotated_fac_loadings
prop_vari_attr <- round(diag(unrotated_fac_loadings %*% t(unrotated_fac_loadings)), 2)
my_list$prop_variation_attr <- prop_vari_attr
# "verimax rotation"
rot <- varimax(unrotated_fac_loadings, eps = 1e-12)$rotmat
rot_fac_loadings <- round(unrotated_fac_loadings %*% rot, 2)
my_list$rotated_factor_loadings <- rot_fac_loadings
f_star <- round(std_data %*% rot_fac_loadings %*% solve(t(rot_fac_loadings) %*% rot_fac_loadings), 2)
#-------------- tidy eval problems ??? --------------------------------------
# label_by <- enquo(label_by)
# color_by <- enquo(color_by)
# vec_1 <- data %>%
#   select(!!label_by)
#
# vec_2 <- data %>%
#   select(!!color_by)
#
# factor_loads <- data.frame(vec_1, vec_2, f_star)
#
# my_list$factor_loadings <- factor_loads
return(my_list)
}
my_analysis <- run_pca_fa(gtcars, label_by = gtcars$mpg_c, color_by = gtcars$mfr)
my_analysis$pc1_pc2_plot
run_pca_fa <- function(data, label_by = NULL, color_by = NULL, num_pcs_for_loadings = 4, ...) {
# label_by <- enquo(label_by)
# color_by <- enquo(color_by)
#num_pcs_for_loadings <- enquo(num_pcs_for_loadings)
#-------------- create blank list to fill -----------------------------------
my_list <- list()
#-------------- select numeric columns for calculations ---------------------
is_a_number <- function(x) {
if ("numeric" %in% class(x) || "double" %in% class(x) || "integer" %in% class(x)) {
return(TRUE)
} else if ("character" %in% class(x) || "factor" %in% class(x)) {
return(FALSE)
}
}
std_data <- data %>%
select_if(is_a_number) %>%
scale()
std_data <- na.omit(std_data)
#-------------- perform pca -------------------------------------------------
pr_comp <- prcomp(na.omit(std_data))
#-------------- get pca summary ---------------------------------------------
pr_summary <- pr_comp %>%
summary()
#-------------- get factor loads --------------------------------------------
# "importance" of each variable in determining PCs
fac_loads <- round(cor(std_data, pr_comp$x), 2)
#-------------- add some objects to output list -----------------------------
my_list$standardized_data <- std_data
my_list$pricipal_component_decomposition <- pr_comp
my_list$decomposition_summary <- pr_summary
my_list$factor_loads <- fac_loads
#-------------- plot when label_by OR color_by argument is NULL -------------
if (is.null(color_by) || is.null(label_by)) {
pc_plot <- data.frame(pr_comp$x) %>%
ggplot(
aes(
x = PC1,
y = PC2
)
) +
geom_point(
color = "red"
) +
# geom_text_repel(
#   label = ""
# ) +
theme(
legend.title = element_blank(),
legend.position = "top"
)
} else {
#-------------- plot when BOTH arguments are NOT NULL -----------------------
pc_plot <- data.frame(pr_comp$x) %>%
ggplot(
aes(
x = PC1,
y = PC2
)
) +
geom_point(
color = "red"
) +
geom_text_repel(
aes(
label = vars(label_by),
color = vars(color_by)
)
) +
theme(
legend.title = element_blank(),
legend.position = "top"
)
}
#-------------- add plot to output list -------------------------------------
my_list$pc1_pc2_plot <- pc_plot
### transition to factor analysis ###
#-------------- add more objects to output list -----------------------------
unrotated_fac_loadings <- round(pr_comp$rotation %*% diag(pr_comp$sdev)[,1:num_pcs_for_loadings], 2)
my_list$unrotated_factor_loadings <- unrotated_fac_loadings
prop_vari_attr <- round(diag(unrotated_fac_loadings %*% t(unrotated_fac_loadings)), 2)
my_list$prop_variation_attr <- prop_vari_attr
# "verimax rotation"
rot <- varimax(unrotated_fac_loadings, eps = 1e-12)$rotmat
rot_fac_loadings <- round(unrotated_fac_loadings %*% rot, 2)
my_list$rotated_factor_loadings <- rot_fac_loadings
f_star <- round(std_data %*% rot_fac_loadings %*% solve(t(rot_fac_loadings) %*% rot_fac_loadings), 2)
#-------------- tidy eval problems ??? --------------------------------------
# label_by <- enquo(label_by)
# color_by <- enquo(color_by)
# vec_1 <- data %>%
#   select(!!label_by)
#
# vec_2 <- data %>%
#   select(!!color_by)
#
# factor_loads <- data.frame(vec_1, vec_2, f_star)
#
# my_list$factor_loadings <- factor_loads
return(my_list)
}
my_analysis <- run_pca_fa(gtcars, label_by = gtcars$mpg_c, color_by = gtcars$mfr)
my_analysis$pc1_pc2_plot
run_pca_fa <- function(data, label_by = NULL, color_by = NULL, num_pcs_for_loadings = 4, ...) {
# label_by <- enquo(label_by)
# color_by <- enquo(color_by)
#num_pcs_for_loadings <- enquo(num_pcs_for_loadings)
#-------------- create blank list to fill -----------------------------------
my_list <- list()
#-------------- select numeric columns for calculations ---------------------
is_a_number <- function(x) {
if ("numeric" %in% class(x) || "double" %in% class(x) || "integer" %in% class(x)) {
return(TRUE)
} else if ("character" %in% class(x) || "factor" %in% class(x)) {
return(FALSE)
}
}
std_data <- data %>%
select_if(is_a_number) %>%
scale()
std_data <- na.omit(std_data)
#-------------- perform pca -------------------------------------------------
pr_comp <- prcomp(na.omit(std_data))
#-------------- get pca summary ---------------------------------------------
pr_summary <- pr_comp %>%
summary()
#-------------- get factor loads --------------------------------------------
# "importance" of each variable in determining PCs
fac_loads <- round(cor(std_data, pr_comp$x), 2)
#-------------- add some objects to output list -----------------------------
my_list$standardized_data <- std_data
my_list$pricipal_component_decomposition <- pr_comp
my_list$decomposition_summary <- pr_summary
my_list$factor_loads <- fac_loads
#-------------- plot when label_by OR color_by argument is NULL -------------
if (is.null(color_by) || is.null(label_by)) {
pc_plot <- data.frame(pr_comp$x) %>%
ggplot(
aes(
x = PC1,
y = PC2
)
) +
geom_point(
color = "red"
) +
# geom_text_repel(
#   label = ""
# ) +
theme(
legend.title = element_blank(),
legend.position = "top"
)
} else {
#-------------- plot when BOTH arguments are NOT NULL -----------------------
pc_plot <- data.frame(pr_comp$x) %>%
ggplot(
aes(
x = PC1,
y = PC2
)
) +
geom_point(
color = "red"
) +
geom_text_repel(
data = data,
aes(
label = vars(label_by),
color = vars(color_by)
)
) +
theme(
legend.title = element_blank(),
legend.position = "top"
)
}
#-------------- add plot to output list -------------------------------------
my_list$pc1_pc2_plot <- pc_plot
### transition to factor analysis ###
#-------------- add more objects to output list -----------------------------
unrotated_fac_loadings <- round(pr_comp$rotation %*% diag(pr_comp$sdev)[,1:num_pcs_for_loadings], 2)
my_list$unrotated_factor_loadings <- unrotated_fac_loadings
prop_vari_attr <- round(diag(unrotated_fac_loadings %*% t(unrotated_fac_loadings)), 2)
my_list$prop_variation_attr <- prop_vari_attr
# "verimax rotation"
rot <- varimax(unrotated_fac_loadings, eps = 1e-12)$rotmat
rot_fac_loadings <- round(unrotated_fac_loadings %*% rot, 2)
my_list$rotated_factor_loadings <- rot_fac_loadings
f_star <- round(std_data %*% rot_fac_loadings %*% solve(t(rot_fac_loadings) %*% rot_fac_loadings), 2)
#-------------- tidy eval problems ??? --------------------------------------
# label_by <- enquo(label_by)
# color_by <- enquo(color_by)
# vec_1 <- data %>%
#   select(!!label_by)
#
# vec_2 <- data %>%
#   select(!!color_by)
#
# factor_loads <- data.frame(vec_1, vec_2, f_star)
#
# my_list$factor_loadings <- factor_loads
return(my_list)
}
my_analysis <- run_pca_fa(gtcars, label_by = gtcars$mpg_c, color_by = gtcars$mfr)
my_analysis$pc1_pc2_plot
source(here::here("r_scripts", "pca_fa_function.R"))
my_analysis <- run_pca_fa(gtcars, label_by = gtcars$mpg_c, color_by = gtcars$mfr)
my_analysis$pc1_pc2_plot
source(here::here("r_scripts", "pca_fa_function.R"))
my_analysis <- run_pca_fa(gtcars, label_by = gtcars$mpg_c, color_by = gtcars$mfr)
my_analysis$pc1_pc2_plot
my_analysis$prop_variation_attr
install.packages("aod")
library(ggplot2)
library(aod)
mydata <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
head(mydata)
str(mydata)
summary(mydata)
sapply(mydata, sd)  # apply function over a list or vector
# two-way contingency table of categorical outcome and predictors we want
# to make sure there are not 0 cells
xtabs(~admit + rank, data = mydata)
xtabs(~admit + ., data = mydata)  # don't do with CVs with many values
# convert rank to factor and create logit model object
mydata$rank <- factor(mydata$rank)
mylogit <- glm(admit ~ gre + gpa + rank,
data = mydata,
family = "binomial")
summary(mylogit)
library(ggplot2)
library(aod)
mydata <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
head(mydata)
str(mydata)
summary(mydata)
sapply(mydata, sd)  # apply function over a list or vector
# two-way contingency table of categorical outcome and predictors we want
# to make sure there are not 0 cells
xtabs(~admit + rank, data = mydata)
xtabs(~admit + ., data = mydata)  # don't do with CVs with many values
# convert rank to factor and create logit model object
mydata$rank <- factor(mydata$rank)
mylogit <- glm(admit ~ gre + gpa + rank,
data = mydata,
family = "binomial")
summary(mylogit)
## CIs using profiled log-likelihood
confint(mylogit)
## CIs using standard errors
confint.default(mylogit)
# We can test for an overall effect of rank using the wald.test function of the
# aod library. The order in which the coefficients are given in the table of
# coefficients is the same as the order of the terms in the model. This is
# important because the wald.test function refers to the coefficients by their
# order in the model. We use the wald.test function. b supplies the coefficients,
# while Sigma supplies the variance covariance matrix of the error terms, finally
# Terms tells R which terms in the model are to be tested, in this case, terms
# 4, 5, and 6, are the three terms for the levels of rank.
wald.test(b = coef(mylogit),
Sigma = vcov(mylogit),
Terms = 4:6)
